name: deploy-book

on:
  # Trigger the workflow on push to main branch
  push:
    branches:
      - main

env:
  BASE_URL: /${{ github.event.repository.name }}

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  deploy-book:
    runs-on: ubuntu-latest
    # Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
    permissions:
      pages: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
      - name: initialize conda
        uses: conda-incubator/setup-miniconda@v3
        with:
          activate-environment: orcestra_book
          auto-activate-base: false
          use-mamba: true
          miniforge-version: latest
      - name: restore conda environment from cache
        uses: actions/cache/restore@v4
        with:
          path: ${{ env.CONDA }}/envs
          key:
            conda-${{ runner.os }}--${{ runner.arch }}--${{ hashFiles('environment.yml') }}-${{ env.CONDA_CACHE_NUMBER }}
        id: conda_cache
      - name: install conda environment
        run:
          mamba env update -n orcestra_book -f environment.yml
        if: steps.conda_cache.outputs.cache-hit != 'true'
        id: install_conda_env
      - name: upload conda environment to cache
        uses: actions/cache/save@v4
        if: steps.install_conda_env.outcome == 'success'
        with:
          path: ${{ env.CONDA }}/envs
          key:
            conda-${{ runner.os }}--${{ runner.arch }}--${{ hashFiles('environment.yml') }}-${{ env.CONDA_CACHE_NUMBER }}
      # Install dependencies
      #- name: Set up Python 3.11
      #  uses: actions/setup-python@v5
      #  with:
      #    python-version: "3.11"
      #    cache: pip # Implicitly depends upon requirements.txt

      #- name: Install dependencies
      #  run: pip install -r environment.yml
      - name: setting up notebook execution cache
        uses: actions/cache/restore@v4
        with:
          path: |
            arctic_book/_build/.jupyter_cache
          key: notebooks-${{ runner.os }}-${{ hashFiles('environment.yml') }}-${{ github.run_id }}-${{ github.run_attempt }}
          restore-keys: |
            notebooks-${{ runner.os }}-${{ hashFiles('environment.yml') }}-${{ github.run_id }}-
            notebooks-${{ runner.os }}-${{ hashFiles('environment.yml') }}-
      
      # Build the book
      - name: Build the book
        run: jupyter-book build arctic_book

      - name: save execution cache
        uses: actions/cache/save@v4
        if: always()
        with:
          path: |
            arctic_book/_build/.jupyter_cache
          key: notebooks-${{ runner.os }}-${{ hashFiles('environment.yml') }}-${{ github.run_id }}-${{ github.run_attempt }}
      - name: Archive build artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: html
          path: |
            arctic_book/_build/html
      
      # Upload the book's HTML as an artifact
      #- name: Upload artifact
      #  uses: actions/upload-pages-artifact@v3
      #  with:
      #    path: "arctic_book/_build/html"

      # Deploy the book's HTML to GitHub Pages
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
